large_text = """
Водяні двигуни, найповажніші за віком, справно служать на гідроелектростанціях. За виглядом і за потужністю вони не схожі на стародавні водяні колеса. Сьогодні гідротурбіни — наймогутніші двигуни у світі. Падаюча вода обертає величезні сталеві колеса з лопатями, насадженими на масивний вал. І якщо до цього ж валу приєднати генератор, гідроелектростанція почне виробляти електричний струм.
Такий же принцип дії і у вітряних двигунів, тільки колесо з лопатями обертає не вода, а вітер. За допомогою вітродвигунів можна приводити в дію насоси, що викачують воду з глибоких колодязів, а можна отримувати електричний струм — для цього вал потрібно з'єднати з генератором. Але вітер дме з різною силою в різний час, а то і зовсім стихає. Тому на вітроелектростанціях (ВЕС) ставлять накопичувачі енергії. Наприклад, високо розташовані резервуари з водою. Поки є вітер, частина енергії ВЕС примушує працювати насос, що піднімає воду на велику висоту. Але вітер впав — і вода починає зливатися з резервуару. По дорозі вона обертає турбіну і сполучений з нею генератор.
В інших випадках об'єднують в одну ВЕС декілька вітряних коліс, які працюють далеко одне від одного. І якщо вітер є в районі хоч би одного з коліс, станція не перестає подавати енергію."""

words = large_text.split()
print(f'Символів: {len(large_text)}; слів: {len(words)}')
print(type(words))

alteration_signs = '.,1234567890()[]:;—"/\'\\`'
preprocessed_words = list()

# strip шукає не самий рядок, а кожен символ із введеного аргументу
for word in words:
    w = word.strip(alteration_signs).lower()
    if w:
        preprocessed_words.append(w)
    # недобре змінювати список під час ітерації: words.append, words[i] = ...

print(preprocessed_words)
print(preprocessed_words.count('двигуни'))

word_counts = list()
counted_words_set = set()
for word in preprocessed_words:
    if word in counted_words_set:
        continue
    count = preprocessed_words.count(word)
    print(f'Слово {word} зустрічається {count} разів')
    word_tuple = (count, word)
    word_counts.append(word_tuple)
    counted_words_set.add(word)

print(max(word_counts))
print(min(word_counts))
print(sorted(word_counts, reverse=True)[:5])
print(sorted(word_counts, reverse=True)[-5:][::-1])